#![allow(dead_code)]

use self::Example::*;

enum Example {
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    A1,
    B1,
    C1,
    D1,
    E1,
    F1,
    G1,
    H1,
    I1,
    J1,
    K1,
    L1,
    M1,
    N1,
    O1,
    P1,
    Q1,
    R1,
    S1,
    T1,
    U1,
    V1,
    W1,
    X1,
    Y1,
    Z1,
}

fn compare(ex1: Example, ex2: Example) -> bool {
    match (ex1, ex2) {
        (A, A) => true,
        (B, B) => true,
        (C, C) => true,
        (D, D) => true,
        (E, E) => true,
        (F, F) => true,
        (G, G) => true,
        (H, H) => true,
        (I, I) => true,
        (J, J) => true,
        (K, K) => true,
        (L, L) => true,
        (M, M) => true,
        (N, N) => true,
        (O, O) => true,
        (P, P) => true,
        (Q, Q) => true,
        (R, R) => true,
        (S, S) => true,
        (T, T) => true,
        (U, U) => true,
        (V, V) => true,
        (W, W) => true,
        (X, X) => true,
        (Y, Y) => true,
        (Z, Z) => true,
        (A1, A1) => true,
        (B1, B1) => true,
        (C1, C1) => true,
        (D1, D1) => true,
        (E1, E1) => true,
        (F1, F1) => true,
        (G1, G1) => true,
        (H1, H1) => true,
        (I1, I1) => true,
        (J1, J1) => true,
        (K1, K1) => true,
        (L1, L1) => true,
        (M1, M1) => true,
        (N1, N1) => true,
        (O1, O1) => true,
        (P1, P1) => true,
        (Q1, Q1) => true,
        (R1, R1) => true,
        (S1, S1) => true,
        (T1, T1) => true,
        (U1, U1) => true,
        (V1, V1) => true,
        (W1, W1) => true,
        (X1, X1) => true,
        (Y1, Y1) => true,
        (Z1, Z1) => true,
        _ => false,
    }
}

fn main() {
    compare(A, A);
}
